services:
  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    volumes:
      - zookeeper-data:/opt/zookeeper-3.4.13/data
    networks:
      - runify-network
  
  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1" 
      KAFKA_ADVERTISED_HOST_NAME: kafka
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://kafka:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOGS_DIR: /kafka/kafka_logs
      KAFKA_BROKER_ID: 1
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - kafka-logs:/kafka/kafka-logs-kafka
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD-SHELL", "kafka-topics.sh --bootstrap-server localhost:9092 --topic events --describe"]
      interval: 5s
      timeout: 20s
      retries: 5
    networks:
      - runify-network

  mysql:
      image: mysql:latest
      container_name: mysql-container
      environment:
        MYSQL_ROOT_PASSWORD: ${MYSQL_ROOT_PASSWORD}
        MYSQL_DATABASE: events
      ports:
        - "3306:3306"  
      volumes:
        - mysql_data:/var/lib/mysql  
      command:
        - --character-set-server=utf8mb4
        - --collation-server=utf8mb4_unicode_ci
        - --bind-address=0.0.0.0
      healthcheck:
        test: ["CMD", "mysql", "-uroot", "-p${MYSQL_ROOT_PASSWORD}", "-e", "SELECT 1"]
        interval: 5s
        timeout: 5s
        retries: 5
      networks:
        - runify-network

  receiver:
    image: jackletrungtin/receiver:latest
    build:
      context: ./Receiver
      dockerfile: Dockerfile
    ports:
      - "8080"
    networks:
      - runify-network
    environment:
      - TARGET_ENV=test
      - PYTHONUNBUFFERED=1
    depends_on:
      kafka:
        condition: service_healthy
    volumes:
      - /home/azureuser/config/receiver:/config
      - /home/azureuser/logs:/logs 


  storage:
    image: jackletrungtin/storage:latest
    build:
      context: ./Storage
      dockerfile: Dockerfile
    ports:
      - "8090"
    networks:
      - runify-network
    environment:
      - TARGET_ENV=test
      - PYTHONUNBUFFERED=1
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD}
      - MYSQL_PORT=3306
    depends_on:
      mysql:
        condition: service_healthy
      kafka:
        condition: service_started #service_healthy might be 
    volumes:
      - /home/azureuser/config/storage:/config
      - /home/azureuser/logs:/logs

  processing:
    image: jackletrungtin/processing:latest
    build:
      context: ./Processing
      dockerfile: Dockerfile
    ports:
      - "8100"
    networks:
      - runify-network
    environment:
      - TARGET_ENV=test
      - PYTHONUNBUFFERED=1
    depends_on:
      - storage
    volumes:
      - /home/azureuser/config/processing:/config
      - /home/azureuser/logs:/logs
      - processing-db:/data 

  analyzer:
    build:
      context: ./Analyzer
      dockerfile: Dockerfile
    ports:
      - "8110"
    networks:
      - runify-network
    environment:
      - TARGET_ENV=test
      - PYTHONUNBUFFERED=1
    depends_on:
      - kafka
    volumes:
      - /home/azureuser/config/analyzer:/config
      - /home/azureuser/logs:/logs

  dashboard:
    build:
      context: ./dashboard-ui
      dockerfile: Dockerfile
    ports:
      - "80"
    networks:
      - runify-network
    depends_on:
      - "processing"
      - "analyzer"

  anomaly-detector:
    build:
      context: ./Anomaly_detector
      dockerfile: Dockerfile
    ports:
      - "8120"
    networks:
      - runify-network
    environment:
      - TARGET_ENV=test
      - PYTHONUNBUFFERED=1    
    depends_on:
      kafka:
        condition: service_healthy    
    volumes:
      - anomaly-storage:/data
      - /home/azureuser/config/anomaly-detector:/config  
      - /home/azureuser/logs:/logs   
    deploy:
      resources:
        limits:
          cpus: '0.50'
          memory: 512M
        reservations:
          cpus: '0.25'
          memory: 256M                        

  nginx:
    image: nginx:latest
    ports:
      - "80:80"
    volumes:
      - ./reverse_proxy/nginx.conf:/etc/nginx/nginx.conf:ro
    networks:
      - runify-network
    depends_on:
      - receiver
      - storage
      - processing
      - analyzer
      - dashboard
      - anomaly-detector
  
networks:
  runify-network:
    driver: bridge

volumes:
  mysql_data:
  kafka-logs:        
  zookeeper-data:
  processing-db:    
  anomaly-storage: 